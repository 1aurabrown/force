{
  "name": "artsy-passport",
  "version": "0.1.4",
  "description": "Wires up the common auth handlers for Artsy's [Ezel](ezeljs.com)-based apps using [passport](http://passportjs.org/).",
  "keywords": [
    "artsy",
    "passport",
    "auth",
    "authentication"
  ],
  "author": {
    "name": "Craig Spaeth",
    "email": "craigspaeth@gmail.com",
    "url": "http://craigspaeth.com"
  },
  "engines": {
    "node": ">= 0.10.x"
  },
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "passport": "*",
    "passport-facebook": "*",
    "passport-twitter": "*",
    "passport-local": "*",
    "superagent": "*",
    "coffee-script": "*",
    "express": "3.4.7"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "sinon": "*",
    "jade": "*",
    "underscore": "*",
    "backbone": "*",
    "sharify": "*",
    "backbone-super-sync": "*",
    "browserify": "*",
    "coffeeify": "*",
    "artsy-xapp-middleware": "*",
    "zombie": "*",
    "rewire": "*"
  },
  "readme": "# Artsy Passport\n\nWires up the common auth handlers for Artsy's [Ezel](http://ezeljs.com)-based apps using [passport](http://passportjs.org/). Used internally at Artsy to DRY up authentication code.\n\n## Setup\n\n#### Make sure you first mount session, body parser, and [xapp](https://github.com/artsy/artsy-xapp-middleware) middlware.\n\n````coffeescript\napp.use require('artsy-xapp-middlware') { #... }\napp.use express.bodyParser()\napp.use express.cookieParser('foobar')\napp.use express.cookieSession()\n````\n\n#### Then mount Artsy Passport passing a big configuration hash.\n\n_Values indicate defaults._\n\n````coffeescript\napp.use artsyPassport\n  FACEBOOK_ID: # Facebook app ID\n  FACEBOOK_SECRET: # Facebook app secret\n  TWITTER_KEY: # Twitter consumer key\n  TWITTER_SECRET: # Twitter consumer secret\n  ARTSY_ID: # Artsy client id\n  ARTSY_SECRET: # Artsy client secret\n  SECURE_ARTSY_URL: # SSL Artsy url e.g. https://artsy.net\n  APP_URL: # Url pointing back to your app e.g. http://flare.artsy.net\n  facebookPath: '/users/auth/facebook' # Url to point your facebook button to\n  twitterPath: '/users/auth/twitter' # Url to point your twitter button to\n  loginPath: '/users/sign_in' # POST `email` and `password` to this path to login\n  signupPath: '/users/invitation/accept' # POST `email` and `password` to this path to signup\n  twitterCallbackPath: '/users/auth/twitter/callback' # After twitter auth callback url\n  facebookCallbackPath: '/users/auth/facebook/callback' # After facebook auth callback url\n  # The user data to cache in the session\n  userKeys: ['id', 'type', 'name', 'email', 'phone', 'lab_features', 'default_profile_id']\n  CurrentUser: # Backbone Model class to serialize the user into e.g. `CurrentUser`\n  # Temporary generated email for twitter signup.\n  twitterSignupTempEmail: (token, secret, profile) -> 'md5hash@artsy.net'\n  # Path for a \"One last step\" UI that lets Artsy store the user's email after \n  # twitter signup.\n  twitterLastStepPath: '/users/auth/twitter/email'\n````\n\nThe keys are cased so it's convenient to pass in a configuration hash. A minimal setup could look like this:\n\n````coffeescript\napp.use artsyPassport _.extend config,\n  CurrentUser: CurrentUser\n````\n\n**Note:** CurrentUser must be a Backbone model with typical `get` and `toJSON` methods.\n\n#### Create a login form pointing to your paths.\n\n````jade\nh1 Login\na( href='/users/auth/facebook' ) Login via Facebook\na( href='/users/auth/twitter' ) Login via Twitter\nform( action='/users/sign_in', method='POST' )\n  h3 Login via Email\n  input( name='name' )\n  input( name='email' )\n  input( name='password' )\n  button( type='submit' ) Signup\n````\n\n#### And maybe a signup form...\n\n````jade\nh1 Signup\na( href='/users/auth/facebook?sign_up=true' ) Signup via Facebook\na( href='/users/auth/twitter?sign_up=true' ) Signup via Twitter\nform( action='/users/invitation/accept', method='POST' )\n  h3 Signup via Email\n  input( name='name' )\n  input( name='email' )\n  input( name='password' )\n  button( type='submit' ) Signup\n````\n\n#### Finally there's this weird \"one last step\" UI for twitter to store emails after signup.\n\n````jade\nh1 Just one more step\nform( method='post', action='/users/auth/twitter/email' )\n  input.bordered-input( name='email' )\n  button( type='submit' ) Join Artsy\n````\n\n#### Handle login and signup callbacks.\n\n````coffeescript\n{ loginPath, signupPath, twitterCallbackPath,\n  twitterLastStepPath, facebookCallbackPath } = artsyPassport.options\n\napp.post loginPath, (req, res) ->\n  res.redirect '/'\napp.post signupPath, (req, res) ->\n  res.redirect '/personalize'\napp.get twitterCallbackPath, (req, res) ->\n  if req.query.sign_up then res.redirect('/personalize') else res.redirect('/')\napp.get twitterLastStepPath, (req, res) ->\n  res.render 'twitter_last_step'\napp.get facebookCallbackPath, (req, res) ->\n  if req.query.sign_up then res.redirect('/personalize') else res.redirect('/')\n````\n\n#### Access a logged in Artsy user in a variety of ways...\n\nIn your server-side templates\n\n````jade\nh1 Hello #{user.get('name')}\n````\n\nIn your client-side code\n\n````coffeescript\nCurrentUser = require '../models/current_user.coffee'\nsd = require('sharify').data\n\nuser = new CurrentUser(sd.CURRENT_USER)\n````\n\nIn your routers\n\n````coffeescript\napp.get '/', (req, res) ->\n  res.send 'Hello ' + req.user.get('name')\n````\n\n_These forms of user will be null if they're not logged in._\n\n## Contributing\n\nFirst install node modules `npm install` then write a ./config.coffee that looks something like this:\n\n````coffeescript\nmodule.exports =\n  FACEBOOK_ID: ''\n  FACEBOOK_SECRET: ''\n  TWITTER_KEY: ''\n  TWITTER_SECRET: ''\n  ARTSY_ID: ''\n  ARTSY_SECRET: ''\n  SECURE_ARTSY_URL: 'https://staging.artsy.net'\n  APP_URL: 'http://local.artsy.net:3000'\n  # An Artsy user that's linked to facebook and twitter\n  ARTSY_EMAIL: 'craig@artsy.net'\n  ARTSY_PASSWORD: '***'\n  TWITTER_EMAIL: 'craig@artsy.net'\n  TWITTER_PASSWORD: '***'\n  FACEBOOK_EMAIL: 'craig@artsy.net'\n  FACEBOOK_PASSWORD: '***'\n````\n\nThen you can check the example by running `make example` and opening [localhost:4000](http://localhost:4000). The tests are integration tests that use the example, so once you set this up run `make test` to run tests.\n",
  "readmeFilename": "README.md",
  "_id": "artsy-passport@0.1.4",
  "dist": {
    "shasum": "152a7fdb996a8946a0868091e4135c19e112896d"
  },
  "_resolved": "git://github.com/artsy/artsy-passport.git#e7a6f46cd1393292cb077d439e3011b20ff6d26f",
  "_from": "artsy-passport@git://github.com/artsy/artsy-passport.git"
}
