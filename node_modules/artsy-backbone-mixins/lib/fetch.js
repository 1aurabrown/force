// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, DEFAULT_CACHE_TIME, NODE_ENV, REDIS_URL, client, parse, red, redis, _, _ref;

  _ = require('underscore');

  Backbone = require('backbone');

  parse = require("url").parse;

  _ref = require('../config'), REDIS_URL = _ref.REDIS_URL, DEFAULT_CACHE_TIME = _ref.DEFAULT_CACHE_TIME, NODE_ENV = _ref.NODE_ENV;

  client = void 0;

  if (typeof window === "undefined" || window === null) {
    redis = require('redis');
    if (NODE_ENV === 'development' && (client = redis.createClient())) {

    } else if (NODE_ENV !== 'test' && (REDIS_URL != null)) {
      red = parse(REDIS_URL || '');
      client = redis.createClient(red.port, red.hostname);
      client.auth(red.auth.split(':')[1]);
    }
  }

  module.exports = function(artsyUrl) {
    return {
      fetchUntilEnd: function(options) {
        var key, success;
        if (options == null) {
          options = {};
        }
        key = "fetch-until-end:" + (JSON.stringify(options));
        success = (function(_this) {
          return function() {
            var fetchPage, opts, page;
            page = 0;
            if (options.data && options.data.page) {
              page = options.data.page - 1;
            }
            opts = _.clone(options);
            fetchPage = function() {
              var _ref1;
              return _this.fetch(_.extend(opts, {
                data: _.extend((_ref1 = opts.data) != null ? _ref1 : {}, {
                  page: page += 1
                }),
                remove: false,
                success: function(col, res) {
                  if (res.length === 0) {
                    if (client) {
                      client.set(key, JSON.stringify(_this.models));
                      client.expire(key, DEFAULT_CACHE_TIME);
                    }
                    return typeof options.success === "function" ? options.success(_this) : void 0;
                  } else {
                    return fetchPage();
                  }
                },
                error: options.error
              }));
            };
            return fetchPage();
          };
        })(this);
        if (client) {
          return client.get(key, (function(_this) {
            return function(err, json) {
              if (json) {
                _this.reset(JSON.parse(json));
                return typeof options.success === "function" ? options.success(_this) : void 0;
              } else {
                return success();
              }
            };
          })(this));
        } else {
          return success();
        }
      },
      fetchSetItemsByKey: function(key, options) {
        if (options == null) {
          options = {};
        }
        return new Backbone.Collection(null).fetch({
          url: "" + artsyUrl + "/api/v1/sets?key=" + key,
          cache: options.cache,
          success: (function(_this) {
            return function(sets) {
              if (!sets.length) {
                return options.success(_this);
              }
              return new Backbone.Collection(null).fetch({
                url: "" + artsyUrl + "/api/v1/set/" + (sets.first().get('id')) + "/items",
                cache: options.cache,
                success: function(col) {
                  _this.reset(col.toJSON());
                  return options.success(_this);
                },
                error: options.error
              });
            };
          })(this),
          error: options.error
        });
      }
    };
  };

}).call(this);
