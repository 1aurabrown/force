// Generated by CoffeeScript 1.7.1
(function() {
  var _;

  _ = require('underscore');

  module.exports = function(secureImagesUrl, imagesUrlPrefix) {
    if (imagesUrlPrefix == null) {
      imagesUrlPrefix = 'http://static%d.artsy.net';
    }
    return {
      defaultImageVersion: function() {
        if (this.has('image_versions' || this.has('versions'))) {
          return (this.get('image_versions') || this.get('versions'))[0];
        } else {
          return null;
        }
      },
      missingImageUrl: function() {
        return "/images/missing_image.png";
      },
      hasImage: function(version) {
        return _.contains(this.get('image_versions'), version) || _.contains(this.get('versions'), version) || version === 'original';
      },
      imageUrl: function(version) {
        if (version == null) {
          version = this.defaultImageVersion();
        }
        if (this.hasImage(version)) {
          return this.sslUrl(this.get('image_url').replace(':version', version));
        } else if (this.get('image_versions').length) {
          return this.sslUrl(this.get('image_url').replace(':version', this.get('image_versions')[0]));
        } else {
          return this.missingImageUrl();
        }
      },
      bestImageUrl: function(versions) {
        var version, _i, _len;
        if (versions == null) {
          versions = [];
        }
        for (_i = 0, _len = versions.length; _i < _len; _i++) {
          version = versions[_i];
          if (this.hasImage(version)) {
            return this.imageUrl(version);
          }
        }
        return this.imageUrl();
      },
      sslUrl: function(url) {
        if (!(secureImagesUrl && imagesUrlPrefix)) {
          return url;
        }
        if (this.imagesUrlPrefixRE == null) {
          this.imagesUrlPrefixRE = new RegExp(imagesUrlPrefix.replace('%d', '\\d'));
        }
        return url.replace(this.imagesUrlPrefixRE, secureImagesUrl);
      }
    };
  };

}).call(this);
