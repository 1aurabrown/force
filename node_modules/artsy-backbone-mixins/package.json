{
  "name": "artsy-backbone-mixins",
  "version": "0.0.15",
  "description": "A library of Backbone mixins that DRY up some common domain logic and Artsy API rabbit holes..",
  "keywords": [
    "backbone",
    "helpers",
    "mixins",
    "util"
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/artsy/artsy-backbone-mixins.git"
  },
  "author": {
    "name": "Craig Spaeth",
    "email": "craigspaeth@gmail.com",
    "url": "http://craigspaeth.com"
  },
  "contributors": [
    {
      "name": "Brennan Moore",
      "email": "brennanmoore@gmail.com",
      "url": "http://brennanmoore.com"
    }
  ],
  "scripts": {
    "test": "mocha",
    "preinstall": "coffee -c lib"
  },
  "dependencies": {
    "showdown": "git://github.com/craigspaeth/showdown.git",
    "underscore": "*",
    "backbone": "*"
  },
  "devDependencies": {
    "coffee-script": "*",
    "mocha": "*",
    "should": "*",
    "sinon": "*"
  },
  "readme": "# artsy-backbone-mixins\n\nA library of Backbone mixins that DRY up some common domain logic and Artsy API rabbit holes. Used internally at Artsy, but maybe you'll find some useful patterns here.\n\nFunctions are namespaced by common sets of functionality such as \"Markdown\", \"Image\", or \"Dimensions\".\n\n````coffeescript\n_ = require 'underscore'\n{ Markdown, Image } = require 'artsy-backbone-mixins'\n\nclass Artwork extends Backbone.Model\n\n  _.extend @prototype, Markdown\n  _.extend @prototype, Image\n````\n\n## Markdown\n\n````coffeescript\n{ Markdown } = require 'artsy-backbone-mixins'\n\nclass Artwork extends Backbone.Model\n\n  _.extend @prototype, Markdown\n\n````\n\n### mdToHtml(attr)\n\nConverts an attribute into markdown using showdown.js\n\n````coffeescript\nartist.mdToHtml('biography')\n````\n\n### mdToHtmlToText(attr)\n\nConverts an attribute into markdown & escapes html.\n\n````coffeescript\nartist.mdToHtmlToText('biography')\n````\n\n### htmlToText(attr)\n\nEscapes html from an attribute.\n\n````coffeescript\nartist.htmlToText('biography')\n````\n\n## Dimensions\n\n````coffeescript\n{ Dimensions } = require 'artsy-backbone-mixins'\n\nclass Artwork extends Backbone.Model\n\n  _.extend @prototype, Dimensions\n\n````\n\n### dimensions([options])\n\nCommonly dimensions in Artsy's API are structured like `{ dimensions: { in: \"10 x 20\" }, metric: \"in\" }`. This provides a convenient method for outputting a formatted dimension string based on this data. Pass in some options for better formatting.\n\n````coffeescript\nartist.set { dimensions: { in: \"10 x 20 in\", cm: '13 1/2 x 24  2/3 cm' }, metric: \"in\" }\nartist.dimensions() # '10 x 20 in'\nartist.dimensions(metric: 'cm') # 13 1/2  x 24 2/3 cm\nartist.dimensions(metric: 'cm', format: 'superscript') # 13 ½  x 24 ⅔ cm\nartist.dimensions(metric: 'cm', format: 'decimal') # 13.5  x 24.33 cm\n````\n\n#### options.metric: ('in' or 'cm') (defaults to `@get('metric')`)\n\n````coffeescript\nartist.dimensions(metric: 'cm')\n````\n\n#### options.format: 'superscript'\n\nTurns 10 3/4 into superscript html like 10 `<sup>3/4</sup>`.\n\n````coffeescript\nartist.dimensions(format: 'superscript')\n````\n\n#### options.format: 'decimal'\n\nConverts porely formatted metric dimensions that appear as fractions into a proper metric decimal formatting.\n\n````coffeescript\nartist.dimensions(format: 'decimal')\n````\n\n## Fetch\n\n_Remember to pass in the artsy url._\n\n````coffeescript\n{ Fetch } = require 'artsy-backbone-mixins'\n{ ARTSY_URL } = require('sharify').data\n\nclass Artworks extends Backbone.Collection\n\n  _.extend @prototype, Fetch(ARTSY_URL)\n\n````\n\n### fetchUntilEnd(options)\n\nFor paginated routes, fetches the collection's url until the endpoint returns 0 results.\n\n````coffeescript\nartworks.fetchUntilEnd success: ->\n  # Phew... I have all the artworks from Artsy\n````\n\nIt respects data params like page (if you fetch page 1 on the server and `fetchUntil` end on the client for example)\n````coffeescript\n# I already rendered page 1 from a `fetch`...\nartworks.fetchUntilEnd\n  data:\n    page: 2\n    size: 20\n  success: ->\n    # I now have artwork 21 - the end\n````\n\n### fetchSetItemsByKey(key, options)\n\nFetches a set by key and populates the collection with the first result.\n\n````coffeescript\nfeaturedLinks.fetchSetItemsByKey 'homepage:featured-sections', success: ->\n  featuredLinks.first().get('name').should.equal 'Magnum Photos'\n````\n\n## AToZ\n\n````coffeescript\n{ AToZ } = require 'artsy-backbone-mixins'\n\nclass Artworks extends Backbone.Collection\n\n  _.extend @prototype, AToZ\n\n````\n\n### groupByAlpha()\n\nSorts a collection groupped alphabetically based on the `alphaSortKey` function on the model. If there is no `alphaSortKey` function on the model it will default to `@get 'sortable_id'`.\n\nSample output:\n\n````\n{\n  '0-9': [ model_instance, model_instance, model_instance ],\n  A: [ model_instance, model_instance, model_instance ],\n  // ...\n  Z: [ model_instance, model_instance, model_instance ]\n}\n````\n\n````coffeescript\nartworks.model.alphaSortKey = -> @get 'title'\nartworks.groupByAlpha()\n````\n\n### groupByAlphaWithColumns([numberOfColumns])\n\nGroups collection output in a format suitable for rendering in an A-Z list with a specified number of columns. The models must implement a `href` and `displayName` method.\n\nSample output:\n\n````\n[\n { letter: '0-9', columns: [ ... ] },\n { letter: 'A', columns: [ ... ] },\n  ...\n { letter: 'Z', columns: [ ... ] }\n]\n// Each column is a 2D array of objects with `href`, and `name` properties:\ncolumns: [\n  [ { href: '...', name: '...' }, ... { href: '...', name: '...' } ],\n  [ { href: '...', name: '...' }, ... { href: '...', name: '...' } ],\n  [ { href: '...', name: '...' }, ... { href: '...', name: '...' } ]\n]\n````\n\n````coffeescript\nartworks.model.href = -> \"/artwork/#{@get 'id'}\"\nartworks.model.displayName = -> @get 'title'\nartworks.groupByAlphaWithColumns()\n````\n\n## Image\n\n````coffeescript\n{ Image } = require 'artsy-backbone-mixins'\n\nclass FeaturedLink extends Backbone.Model\n\n  _.extend @prototype, Image\n\n````\n\n### imageUrl([version])\n\nThe Artsy API often structures image data like `{ image_url: 'foo/bar/:version.jpg' }` this method will return a replaced string with sensible defaults.\n\n````coffeescript\nfeaturedLink.imageUrl('small')\n````\n\n### missingImageUrl()\n\n`imageUrl` uses the `missingImageUrl` on the model to know what image to show when it can't find a version of it in the data. Defaults to `/image/missing_image.png`.\n\n### defaultImageVersion()\n\nTell `imageUrl` which version to look for first. Defaults to the first item in the `image_versions` or `versions` attribute.\n\n### hasImage(version)\n\nChecks the `image_versions` or `versions` attribute for the image version and returns true/false.\n\n### bestImageUrl([versions])\n\nReturn an image URL, preferring the earlier versions in `versions` if available, but degrading to the later ones otherwise. Finally, degrades to `missingImageUrl`.\n\n```coffeescript\nfeature.bestImageUrl(['large', 'medium', 'small'])\n```\n\n## Contributing\n\nPlease fork the project and submit a pull request with tests. Install node modules `npm install` and run tests with `npm test`.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/artsy/artsy-backbone-mixins/issues"
  },
  "homepage": "https://github.com/artsy/artsy-backbone-mixins",
  "_id": "artsy-backbone-mixins@0.0.15",
  "dist": {
    "shasum": "572e0966b24487f25d5c000ac129f20002843082"
  },
  "_resolved": "git://github.com/artsy/artsy-backbone-mixins.git#f598984a26b4a436aeea4b9faa1abc48f03c62dc",
  "_from": "artsy-backbone-mixins@git://github.com/artsy/artsy-backbone-mixins.git"
}
