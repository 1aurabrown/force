{
  "author": {
    "name": "Ferdinand Torggler"
  },
  "name": "scrollpoints",
  "description": "Scroll callbacks for DOM Elements",
  "version": "0.2.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/the-diamond-dogs-group-oss/scrollpoints"
  },
  "main": "scrollpoints.js",
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-contrib-watch": "~0.5.3"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/the-diamond-dogs-group-oss/scrollpoints/blob/master/LICENSE.MIT"
    }
  ],
  "readme": "# Scrollpoints\n\nScrollpoints lets you watch specific DOM-elements and fires a callback when an\nelement enters or leaves the screen.\nIt behaves similar to the [jQuery Waypoints](https://github.com/imakewebthings/jquery-waypoints)\nplugin, but does not depend on jQuery and is very small in size ( < 2KB).\n\n## Installation\nScrollpoints is available as npm module and bower component.\n\nIf you are using npm, call `npm install scrollpoints --save` to download the scrollpoints module and to add it to your `package.json` file. To use it with browserify, require it like this: `var Scrollpoints = require('scrollpoints');`\n\nUsing bower, simply install it with `bower install scrollpoints` and include the scrollpoints.js or scrollpoints.min.js file.\n\n## Documentation\n### Adding a new scrollpoint\nTo add a new scroll-handler function to a specific DOM-element, Scrollpoints provides the `add`\nfunction, which takes two arguments: the function to be executed and a configuration object.\n\nFirst, we grab an element from the DOM.\n\n```javascript\nvar elem = document.querySelector('#my-awesome-element');\n```\nIf the configuration object isn't provided to `add`, the default configuration will be used.\n\n```javascript\nScrollpoints.add(elem, function(domElement) {\n    // this function will execute when elem entered the screen\n});\n```\n\nIf you want to customize behavior, add the config-object as the third parameter:\n\n```javascript\nvar config = {\n    when: 'entering',\n    reversed: true,\n    once: false\n};\n\nScrollpoints.add(elem, function(domElement) {\n    /*\n        This function will execute when elem starts to enter\n        the screen (entering) from above, i.e. when the user\n        scrolls upwards (reversed is set). It will happen\n        every time the user scrolls past this point (once is set to false).\n    */\n}, config);\n```\n\n### Options\n\nOptions are per-element configurations to cause the plugin to behave differently. Add\nthem as an object as third parameter to the `add` function.\n\n#### when\n*Default value:* `'entered'`\n\nPossible values:\n- `'entered'` Callback fires when the whole Element entered the screen.\n- `'entering'` Callback fires immediately when the element starts to enter the screen.\n- `'leaving'` Callback fires when the element starts to leave the screen.\n- `'left'` Callback fires when the element was scrolled off the screen completely\n\n#### reversed\n*Default value:* `false`\n\nWhen set to `true`, upwards-scrolling is observed. For instance, `when: 'entering'` means\nwhen the user scrolls upwards and the element comes in from above, `when: 'left'` fires\nwhen an element has left the screen at the lower edge of the browser window, when scrolling\nback to top.\n\n#### once\n*Default value:* `true`\n\nWhen a user scrolls to a specific element, the callback fires and is then disabled. Setting\n`once` to `false`, will cause the callback to execute every time when the user scrolls to\nthe same point. If an `entering` callback is set, it will then execute when the user scrolls\nto that element, scrolling up and down to the element again will cause it to be called again.\n\n#### offset\n*Default value:* `0`\n\nSetting offset to, say, `200` on an `entered` scrollpoint, causes the callback to fire\nwhen the element entered the screen and the lower edge of the element has a 200px\ndistance from the bottom of the browser window. Think of this property as *\"a specific\namount of pixels too late\"*. When an offset is set on a `leaving` element, it means that\nthe callback will fire when the element is already `x` pixels out of the screen.\n\n### Overriding defaults\n\nScrollpoints provides a `configure` function to set the defaults for every new\nScrollpoint.\n\nEvery Scrollpoint you create after this call will not only fire once, and will always\nfire 50px before the actual point.\n\n```javascript\nScrollpoints.configure({\n    once: false,\n    offset: -50\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/the-diamond-dogs-group-oss/scrollpoints/issues"
  },
  "homepage": "https://github.com/the-diamond-dogs-group-oss/scrollpoints",
  "_id": "scrollpoints@0.2.0",
  "dist": {
    "shasum": "9907983c283a392b8753e47eb27dba2f4b48ddee"
  },
  "_from": "scrollpoints@",
  "_resolved": "https://registry.npmjs.org/scrollpoints/-/scrollpoints-0.2.0.tgz"
}
